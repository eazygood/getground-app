// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	domain "github.com/eazygood/getground-app/internal/core/domain"
	port "github.com/eazygood/getground-app/internal/core/port"
	gomock "github.com/golang/mock/gomock"
)

// MockGuestRepository is a mock of GuestRepository interface.
type MockGuestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGuestRepositoryMockRecorder
}

// MockGuestRepositoryMockRecorder is the mock recorder for MockGuestRepository.
type MockGuestRepositoryMockRecorder struct {
	mock *MockGuestRepository
}

// NewMockGuestRepository creates a new mock instance.
func NewMockGuestRepository(ctrl *gomock.Controller) *MockGuestRepository {
	mock := &MockGuestRepository{ctrl: ctrl}
	mock.recorder = &MockGuestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuestRepository) EXPECT() *MockGuestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGuestRepository) Create(ctx context.Context, guest *domain.Guest) (*domain.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, guest)
	ret0, _ := ret[0].(*domain.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGuestRepositoryMockRecorder) Create(ctx, guest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGuestRepository)(nil).Create), ctx, guest)
}

// Delete mocks base method.
func (m *MockGuestRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGuestRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGuestRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockGuestRepository) GetAll(ctx context.Context, filter port.GetGuestFilter) ([]*domain.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, filter)
	ret0, _ := ret[0].([]*domain.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGuestRepositoryMockRecorder) GetAll(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGuestRepository)(nil).GetAll), ctx, filter)
}

// GetById mocks base method.
func (m *MockGuestRepository) GetById(ctx context.Context, id int64) (*domain.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockGuestRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockGuestRepository)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockGuestRepository) Update(ctx context.Context, id int64, guest *domain.Guest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, guest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGuestRepositoryMockRecorder) Update(ctx, id, guest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGuestRepository)(nil).Update), ctx, id, guest)
}

// MockTableRepository is a mock of TableRepository interface.
type MockTableRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTableRepositoryMockRecorder
}

// MockTableRepositoryMockRecorder is the mock recorder for MockTableRepository.
type MockTableRepositoryMockRecorder struct {
	mock *MockTableRepository
}

// NewMockTableRepository creates a new mock instance.
func NewMockTableRepository(ctrl *gomock.Controller) *MockTableRepository {
	mock := &MockTableRepository{ctrl: ctrl}
	mock.recorder = &MockTableRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableRepository) EXPECT() *MockTableRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTableRepository) Create(ctx context.Context, table *domain.Table) (*domain.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, table)
	ret0, _ := ret[0].(*domain.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTableRepositoryMockRecorder) Create(ctx, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTableRepository)(nil).Create), ctx, table)
}

// Delete mocks base method.
func (m *MockTableRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTableRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTableRepository)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockTableRepository) GetById(ctx context.Context, id int64) (*domain.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTableRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTableRepository)(nil).GetById), ctx, id)
}

// GetEmptySeats mocks base method.
func (m *MockTableRepository) GetEmptySeats(ctx context.Context) ([]*domain.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmptySeats", ctx)
	ret0, _ := ret[0].([]*domain.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmptySeats indicates an expected call of GetEmptySeats.
func (mr *MockTableRepositoryMockRecorder) GetEmptySeats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmptySeats", reflect.TypeOf((*MockTableRepository)(nil).GetEmptySeats), ctx)
}

// Update mocks base method.
func (m *MockTableRepository) Update(ctx context.Context, id int64, table domain.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTableRepositoryMockRecorder) Update(ctx, id, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTableRepository)(nil).Update), ctx, id, table)
}

// MockGuesListRepository is a mock of GuesListRepository interface.
type MockGuesListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGuesListRepositoryMockRecorder
}

// MockGuesListRepositoryMockRecorder is the mock recorder for MockGuesListRepository.
type MockGuesListRepositoryMockRecorder struct {
	mock *MockGuesListRepository
}

// NewMockGuesListRepository creates a new mock instance.
func NewMockGuesListRepository(ctrl *gomock.Controller) *MockGuesListRepository {
	mock := &MockGuesListRepository{ctrl: ctrl}
	mock.recorder = &MockGuesListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuesListRepository) EXPECT() *MockGuesListRepositoryMockRecorder {
	return m.recorder
}

// FindAvailableTable mocks base method.
func (m *MockGuesListRepository) FindAvailableTable(ctx context.Context, filter port.GetGuestListFilter) (*domain.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAvailableTable", ctx, filter)
	ret0, _ := ret[0].(*domain.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAvailableTable indicates an expected call of FindAvailableTable.
func (mr *MockGuesListRepositoryMockRecorder) FindAvailableTable(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAvailableTable", reflect.TypeOf((*MockGuesListRepository)(nil).FindAvailableTable), ctx, filter)
}

// GetOccupiedSeats mocks base method.
func (m *MockGuesListRepository) GetOccupiedSeats(ctx context.Context) ([]*domain.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccupiedSeats", ctx)
	ret0, _ := ret[0].([]*domain.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccupiedSeats indicates an expected call of GetOccupiedSeats.
func (mr *MockGuesListRepositoryMockRecorder) GetOccupiedSeats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccupiedSeats", reflect.TypeOf((*MockGuesListRepository)(nil).GetOccupiedSeats), ctx)
}
