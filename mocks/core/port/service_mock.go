// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	domain "github.com/eazygood/getground-app/internal/core/domain"
	port "github.com/eazygood/getground-app/internal/core/port"
	gomock "github.com/golang/mock/gomock"
)

// MockGuestService is a mock of GuestService interface.
type MockGuestService struct {
	ctrl     *gomock.Controller
	recorder *MockGuestServiceMockRecorder
}

// MockGuestServiceMockRecorder is the mock recorder for MockGuestService.
type MockGuestServiceMockRecorder struct {
	mock *MockGuestService
}

// NewMockGuestService creates a new mock instance.
func NewMockGuestService(ctrl *gomock.Controller) *MockGuestService {
	mock := &MockGuestService{ctrl: ctrl}
	mock.recorder = &MockGuestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuestService) EXPECT() *MockGuestServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGuestService) Create(ctx context.Context, g *domain.Guest) (*domain.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, g)
	ret0, _ := ret[0].(*domain.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGuestServiceMockRecorder) Create(ctx, g interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGuestService)(nil).Create), ctx, g)
}

// Delete mocks base method.
func (m *MockGuestService) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGuestServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGuestService)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockGuestService) GetById(ctx context.Context, id int64) (*domain.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockGuestServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockGuestService)(nil).GetById), ctx, id)
}

// GetList mocks base method.
func (m *MockGuestService) GetList(ctx context.Context, filter port.GetGuestFilter) ([]*domain.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, filter)
	ret0, _ := ret[0].([]*domain.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockGuestServiceMockRecorder) GetList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockGuestService)(nil).GetList), ctx, filter)
}

// Update mocks base method.
func (m *MockGuestService) Update(ctx context.Context, id int64, u *domain.Guest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGuestServiceMockRecorder) Update(ctx, id, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGuestService)(nil).Update), ctx, id, u)
}

// MockGuestListService is a mock of GuestListService interface.
type MockGuestListService struct {
	ctrl     *gomock.Controller
	recorder *MockGuestListServiceMockRecorder
}

// MockGuestListServiceMockRecorder is the mock recorder for MockGuestListService.
type MockGuestListServiceMockRecorder struct {
	mock *MockGuestListService
}

// NewMockGuestListService creates a new mock instance.
func NewMockGuestListService(ctrl *gomock.Controller) *MockGuestListService {
	mock := &MockGuestListService{ctrl: ctrl}
	mock.recorder = &MockGuestListServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuestListService) EXPECT() *MockGuestListServiceMockRecorder {
	return m.recorder
}

// FindAvailableTable mocks base method.
func (m *MockGuestListService) FindAvailableTable(ctx context.Context, filter port.GetGuestListFilter) (*domain.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAvailableTable", ctx, filter)
	ret0, _ := ret[0].(*domain.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAvailableTable indicates an expected call of FindAvailableTable.
func (mr *MockGuestListServiceMockRecorder) FindAvailableTable(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAvailableTable", reflect.TypeOf((*MockGuestListService)(nil).FindAvailableTable), ctx, filter)
}

// GetOccupiedSeats mocks base method.
func (m *MockGuestListService) GetOccupiedSeats(ctx context.Context) ([]*domain.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccupiedSeats", ctx)
	ret0, _ := ret[0].([]*domain.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccupiedSeats indicates an expected call of GetOccupiedSeats.
func (mr *MockGuestListServiceMockRecorder) GetOccupiedSeats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccupiedSeats", reflect.TypeOf((*MockGuestListService)(nil).GetOccupiedSeats), ctx)
}

// MockTableService is a mock of TableService interface.
type MockTableService struct {
	ctrl     *gomock.Controller
	recorder *MockTableServiceMockRecorder
}

// MockTableServiceMockRecorder is the mock recorder for MockTableService.
type MockTableServiceMockRecorder struct {
	mock *MockTableService
}

// NewMockTableService creates a new mock instance.
func NewMockTableService(ctrl *gomock.Controller) *MockTableService {
	mock := &MockTableService{ctrl: ctrl}
	mock.recorder = &MockTableServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableService) EXPECT() *MockTableServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTableService) Create(ctx context.Context, table *domain.Table) (*domain.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, table)
	ret0, _ := ret[0].(*domain.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTableServiceMockRecorder) Create(ctx, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTableService)(nil).Create), ctx, table)
}

// Delete mocks base method.
func (m *MockTableService) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTableServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTableService)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockTableService) GetById(ctx context.Context, id int64) (*domain.Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTableServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTableService)(nil).GetById), ctx, id)
}

// GetEmptySeats mocks base method.
func (m *MockTableService) GetEmptySeats(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmptySeats", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmptySeats indicates an expected call of GetEmptySeats.
func (mr *MockTableServiceMockRecorder) GetEmptySeats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmptySeats", reflect.TypeOf((*MockTableService)(nil).GetEmptySeats), ctx)
}

// Update mocks base method.
func (m *MockTableService) Update(ctx context.Context, id int64, table domain.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, table)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTableServiceMockRecorder) Update(ctx, id, table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTableService)(nil).Update), ctx, id, table)
}
